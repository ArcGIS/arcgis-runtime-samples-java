plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.5'
    id "de.undercouch.download" version "3.4.3"
}

import de.undercouch.gradle.tasks.download.Download

group = 'com.esri.samples'

ext {
    arcgisVersion = '100.6.0-2490'
}

javafx {
    version = "11.0.1"
    modules = [ 'javafx.controls' ]
}

compileJava.options.encoding = 'UTF-8'

repositories {
    jcenter()
    maven {
        url 'https://esri.bintray.com/arcgis'
    }
    maven {
        url 'http://olympus.esri.com/artifactory/arcgisruntime-repo'
    }
}

configurations {
    natives
}

dependencies {
    compile "com.esri.arcgisruntime:arcgis-java:$arcgisVersion"
    natives "com.esri.arcgisruntime:arcgis-java-jnilibs:$arcgisVersion"
    natives "com.esri.arcgisruntime:arcgis-java-resources:$arcgisVersion"
    compile 'org.jooq:joox:1.4.0'
}

task downloadData() {
    download {
        src "https://arcgisruntime.maps.arcgis.com/sharing/rest/content/items/c78b149a1d52414682c86a5feeb13d30/data"
        dest './samples-data/stylx/mil2525d.stylx'
        overwrite false
    }
    download {
        src "https://arcgisruntime.maps.arcgis.com/sharing/rest/content/items/1e4ea99af4b440c092e7959cf3957bfa/data"
        dest 'build/data.zip'
        overwrite false
    }
}

task unpackData(type: Copy) {
    dependsOn downloadData
    from (file("build").listFiles().findAll { f -> f.name.endsWith(".zip") }.collect { f -> zipTree(f) }) {
        into 'xml'
    }
    into 'samples-data'
}

task copyNatives(type: Copy) {
    description = "Copies the arcgis native libraries into the project build directory for development."
    group = "build"
    configurations.natives.asFileTree.each {
        from(zipTree(it))
    }
    // store native libraries in a common location shared with other samples
    into "${System.properties.getProperty("user.home")}/.arcgis/$arcgisVersion"
}

run {
    dependsOn copyNatives, unpackData
    mainClassName = 'com.esri.samples.dictionary_renderer_graphics_overlay.DictionaryRendererGraphicsOverlayLauncher'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest { 
        attributes("Main-Class": "$mainClassName") 
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task productionZip(type: Zip) {
    group = 'distribution'
    from (downloadData) {
        into "samples-data"
    }
    from copyNatives
    from jar.destinationDir
    into (project.name)
    baseName = project.name
}

wrapper {
    gradleVersion = '5.0'
}
